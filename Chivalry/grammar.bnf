//Vance Elliott, https://github.com/vanceelliott/Programming-Languages/blob/main/Chivalry/grammar.bnf

program ::= statementList?

statementList ::= statement statementList?

statement ::= expression end
            | initialization
            | declaration
            | assignment
            | functionAssignment
            | functionCall end
            | loop
            | conditional
            | block

initialization ::= type "squire" IDENTIFIER "hold" expression end

declaration ::= type "squire" IDENTIFIER end

assignment::= "give" "(" IDENTIFIER COMMA expression ")" end

functionAssignment ::= type "squire" "do" "(" block ")" "with" "(" parameterList ")" end

functionCall ::=  IDENTIFIER "with" "(" parameterList ")"

loop ::= riverTrolls | mountainTrolls | mischievousTrolls

riverTrolls::= expression "river trolls work for" expression "food" "(" block ")"

mountainTrolls::= "feed mountain troll" expression "(" block ")"

mischievousTrolls::= "mischievous trolls play"

conditional ::= "divine" recursiveExpression "(" block ")" | "villain" "(" block ")"

parameterList ::= expression | expression "and" parameterList

block ::= statement | statement block

expression ::= primary
            |  unary
            |  binary
            | tertinary
            | functionCall

primary ::= type | IDENTIFIER

type ::= NUM
       | WORD
       | moral
       | GHOUL

moral ::= GOOD | EVIL

unary ::= unaryOperator "("expression")"

binary ::= binaryOperator "("expression "and" expression")" | expression comparator expression

tertinary ::= tertOperator "(" expression "and" expression "and" expression ")"

veriatic ::= veriaticOperator "(" recursiveExpression ")"

recursiveExpression ::= expression | expression "and" recursiveExpression

unaryOperator::= "switch" | "despair"

binaryOperator::= "seer" | "voodoo" | "holy" | "realistic"

comparator::= "better" | "equal" | "betterequal"

tertOperator ::= "prettyGood"

veriaticOperator ::= "combine" | "smash" | "witchcraft" | "chop"

tavernDeclaration ::= "build tavern" IDENTIFIER expression "rooms"

tavernAssignment ::= IDENTIFIER "room" expression "guest" expression

tavernCall ::= IDENTIFIER "room" expression

holler::= "holler" "("expression")"
hither::= "hither" "("expression")"


end::= "!" //I'm going to change this because too many people already have this as their end character
